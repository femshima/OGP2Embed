// 
// Generated by @himenon/openapi-typescript-code-generator v0.10.1
// 
// OpenApi : 3.0.0
// 
// 


export namespace crossRefAPI {
    export interface Affiliation {
        name: string;
    }
    export interface Agency {
        id: string;
        label: string;
    }
    export interface AgencyMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.DoiAgency;
    }
    export interface Author {
        ORCID?: string;
        suffix?: string;
        given?: string;
        family: string;
        affiliation: crossRefAPI.Affiliation[];
        name?: string;
        "authenticated-orcid"?: boolean;
        prefix?: string;
        sequence: string;
    }
    export interface Coverage {
        "last-status-check-time": number;
        affiliations: number;
        abstracts: number;
        orcids: number;
        licenses: number;
        references: number;
        funders: number;
        "similarity-checking": number;
        "award-numbers": number;
        "ror-ids": number;
        "update-policies": number;
        "resource-links": number;
        descriptions: number;
        "open-references": number;
    }
    export interface CoverageFull {
        "affiliations-current": number;
        "similarity-checking-current": number;
        "descriptions-current": number;
        "ror-ids-current": number;
        "references-backfie": number;
        "funders-backfile": number;
        "licenses-backfile": number;
        "funders-current": number;
        "affiliations-backfile": number;
        "resource-links-backfile": number;
        "orcids-backfile": number;
        "update-policies-current": number;
        "open-references-backfile": number;
        "ror-ids-backfile": number;
        "orcids-current": number;
        "similarity-checking-backfile": number;
        "descriptions-backfile": number;
        "award-numbers-backfile": number;
        "update-policies-backfile": number;
        "licenses-current": number;
        "award-numbers-current": number;
        "abstracts-backfile": number;
        "resource-links-current": number;
        "abstracts-current": number;
        "open-references-current": number;
        "references-current": number;
    }
    export interface Date {
        "date-parts": number[][];
        "date-time": string;
        timestamp: number;
    }
    export interface DateParts {
        "date-parts": number[][];
    }
    export interface Deposit {
        "matched-citation-count": number;
        filename: string;
        "submitted-at": string;
        status: string;
        length: number;
        "pingback-url": string;
        "citation-count": number;
        test: boolean;
        owner: string;
        "batch-id": string;
    }
    export interface DepositMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Deposit;
    }
    export interface Deposits {
        "total-results": number;
        items: crossRefAPI.Deposit[];
    }
    export interface DepositsMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Deposits;
    }
    export interface DoiAgency {
        /** The DOI identifier associated with the work */
        DOI: string;
        agency: crossRefAPI.Agency;
    }
    export interface DoiCounts {
        "total-dois": number;
        "current-dois": number;
        "backfile-dois": number;
    }
    export interface Flags {
        "deposits-abstracts-current": boolean;
        "deposits-orcids-current": boolean;
        deposits: boolean;
        "deposits-affiliations-backfile": boolean;
        "deposits-update-policies-backfile": boolean;
        "deposits-award-numbers-current": boolean;
        "deposits-resource-links-current": boolean;
        "deposits-ror-ids-current": boolean;
        "deposits-articles": boolean;
        "deposits-affiliations-current": boolean;
        "deposits-funders-current": boolean;
        "deposits-references-backfile": boolean;
        "deposits-ror-ids-backfile": boolean;
        "deposits-abstracts-backfile": boolean;
        "deposits-licenses-backfile": boolean;
        "deposits-award-numbers-backfile": boolean;
        "deposits-descriptions-current": boolean;
        "deposits-references-current": boolean;
        "deposits-resource-links-backfile": boolean;
        "deposits-descriptions-backfile": boolean;
        "deposits-orcids-backfile": boolean;
        "deposits-funders-backfile": boolean;
        "deposits-update-policies-current": boolean;
        "deposits-licenses-current": boolean;
    }
    export interface Funder {
        /** The id of the funder */
        id: string;
        /** The geographic location of the funder */
        location: string;
        name: string;
        /** Other names this funder may be identified with */
        "alt-names": string[];
        uri: string;
        replaces: string[];
        "replaced-by": string[];
        tokens: string[];
    }
    export interface FunderFull {
        "hierarchy-names": crossRefAPI.FunderMessageMessageHierarchyNames;
        "replaced-by": string[];
        "work-count": number;
        name: string;
        descendants: string[];
        "descendant-work-count": number;
        /** The id of the funder */
        id: string;
        tokens: string[];
        replaces: string[];
        uri: string;
        hierarchy: crossRefAPI.FunderHierarchy;
        /** Other names this funder may be identified with */
        "alt-names": string[];
        /** The geographic location of the funder */
        location: string;
    }
    export interface FunderHierarchy {
        more?: boolean;
        [key: string]: crossRefAPI.FunderMessageMessageHierarchyJava$lang$string40749;
    }
    export interface FunderMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.FunderFull;
    }
    export interface FunderMessageMessageHierarchyJava$lang$string40749 {
    }
    export interface FunderMessageMessageHierarchyNames {
        [key: string]: string;
    }
    export interface Funders {
        "items-per-page": number;
        query: crossRefAPI.Query;
        "total-results": number;
        items: crossRefAPI.Funder[];
    }
    export interface FundersMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Funders;
    }
    export interface Journal {
        "last-status-check-time": number;
        counts: crossRefAPI.DoiCounts;
        breakdowns: crossRefAPI.JournalsMessageMessageItemsBreakdowns;
        /** The publisher of the journal */
        publisher: string;
        coverage: crossRefAPI.CoverageFull;
        /** The title of the journal */
        title: string;
        subjects: string[];
        "coverage-type": crossRefAPI.JournalsMessageMessageItemsCoverageType;
        flags: crossRefAPI.Flags;
        /** The ISSN identifier associated with the journal */
        ISSN: string[];
        "issn-type": crossRefAPI.JournalIssnType;
    }
    export interface JournalIssnType {
        value: string;
        type: string;
    }
    export interface JournalMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Journal;
    }
    export interface JournalMessageMessageBreakdowns {
        "dois-by-issued-year": number[][];
    }
    export interface JournalMessageMessageCoverageType {
        all: crossRefAPI.Coverage;
        current: crossRefAPI.Coverage;
        backfile: crossRefAPI.Coverage;
    }
    export interface Journals {
        "items-per-page": number;
        query: crossRefAPI.Query;
        "total-results": number;
        items: crossRefAPI.Journal[];
    }
    export interface JournalsMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Journals;
    }
    export interface JournalsMessageMessageItemsBreakdowns {
        "dois-by-issued-year": number[][];
    }
    export interface JournalsMessageMessageItemsCoverageType {
        all: crossRefAPI.Coverage;
        current: crossRefAPI.Coverage;
        backfile: crossRefAPI.Coverage;
    }
    export interface License {
        URL: string;
        "work-count": number;
    }
    export interface Licenses {
        "total-results": number;
        items: crossRefAPI.License[];
    }
    export interface LicensesMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Licenses;
    }
    export interface Member {
        "last-status-check-time": number;
        "primary-name": string;
        counts: crossRefAPI.DoiCounts;
        breakdowns: crossRefAPI.MembersMessageMessageItemsBreakdowns;
        prefixes: string[];
        coverage: crossRefAPI.CoverageFull;
        prefix: crossRefAPI.MemberPrefix[];
        id: number;
        tokens: string[];
        "counts-type": crossRefAPI.MembersMessageMessageItemsCountsType;
        "coverage-type": crossRefAPI.MembersMessageMessageItemsCoverageType;
        flags: crossRefAPI.Flags;
        location: string;
        names: string[];
    }
    export interface MemberMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Member;
    }
    export interface MemberMessageMessageBreakdowns {
        "dois-by-issued-year": number[][];
    }
    export interface MemberMessageMessageCountsType {
        all: crossRefAPI.MemberMessageMessageCountsTypeAll;
        current: crossRefAPI.MemberMessageMessageCountsTypeCurrent;
        backfile: crossRefAPI.MemberMessageMessageCountsTypeBackfile;
    }
    export interface MemberMessageMessageCountsTypeAll {
        [key: string]: number;
    }
    export interface MemberMessageMessageCountsTypeBackfile {
        [key: string]: number;
    }
    export interface MemberMessageMessageCountsTypeCurrent {
        [key: string]: number;
    }
    export interface MemberMessageMessageCoverageType {
        all: crossRefAPI.MemberMessageMessageCoverageTypeAll;
        current: crossRefAPI.MemberMessageMessageCoverageTypeCurrent;
        backfile: crossRefAPI.MemberMessageMessageCoverageTypeBackfile;
    }
    export interface MemberMessageMessageCoverageTypeAll {
        [key: string]: crossRefAPI.Coverage;
    }
    export interface MemberMessageMessageCoverageTypeBackfile {
        [key: string]: crossRefAPI.Coverage;
    }
    export interface MemberMessageMessageCoverageTypeCurrent {
        [key: string]: crossRefAPI.Coverage;
    }
    export interface MemberPrefix {
        name: string;
        value: string;
        "public-references"?: boolean;
        "reference-visibility": string;
    }
    export interface Members {
        "items-per-page": number;
        query: crossRefAPI.Query;
        "total-results": number;
        items: crossRefAPI.Member[];
    }
    export interface MembersMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Members;
    }
    export interface MembersMessageMessageItemsBreakdowns {
        "dois-by-issued-year": number[][];
    }
    export interface MembersMessageMessageItemsCountsType {
        all: crossRefAPI.MembersMessageMessageItemsCountsTypeAll;
        current: crossRefAPI.MembersMessageMessageItemsCountsTypeCurrent;
        backfile: crossRefAPI.MembersMessageMessageItemsCountsTypeBackfile;
    }
    export interface MembersMessageMessageItemsCountsTypeAll {
        [key: string]: number;
    }
    export interface MembersMessageMessageItemsCountsTypeBackfile {
        [key: string]: number;
    }
    export interface MembersMessageMessageItemsCountsTypeCurrent {
        [key: string]: number;
    }
    export interface MembersMessageMessageItemsCoverageType {
        all: crossRefAPI.MembersMessageMessageItemsCoverageTypeAll;
        current: crossRefAPI.MembersMessageMessageItemsCoverageTypeCurrent;
        backfile: crossRefAPI.MembersMessageMessageItemsCoverageTypeBackfile;
    }
    export interface MembersMessageMessageItemsCoverageTypeAll {
        [key: string]: crossRefAPI.Coverage;
    }
    export interface MembersMessageMessageItemsCoverageTypeBackfile {
        [key: string]: crossRefAPI.Coverage;
    }
    export interface MembersMessageMessageItemsCoverageTypeCurrent {
        [key: string]: crossRefAPI.Coverage;
    }
    export interface Prefix {
        member: string;
        name: string;
        prefix: string;
    }
    export interface PrefixMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Prefix;
    }
    export interface Query {
        "start-index": number;
        "search-terms": string;
    }
    export interface Reference {
        issn?: string;
        "standards-body"?: string;
        issue?: string;
        key: string;
        "series-title"?: string;
        "isbn-type"?: string;
        "doi-asserted-by"?: string;
        "first-page"?: string;
        isbn?: string;
        doi?: string;
        component?: string;
        "article-title"?: string;
        "volume-title"?: string;
        volume?: string;
        author?: string;
        "standard-designator"?: string;
        year?: string;
        unstructured?: string;
        edition?: string;
        "journal-title"?: string;
        "issn-type"?: string;
    }
    export interface Type {
        id: string;
        label: string;
    }
    export interface TypeMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Type;
    }
    export interface Types {
        "items-per-page": number;
        query: crossRefAPI.Query;
        "total-results": number;
        items: crossRefAPI.Type[];
    }
    export interface TypesMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Types;
    }
    export interface Work {
        institution?: crossRefAPI.WorkInstitution;
        indexed: crossRefAPI.Date;
        posted?: crossRefAPI.DateParts;
        "publisher-location"?: string;
        "update-to"?: crossRefAPI.WorkUpdate[];
        "standards-body"?: crossRefAPI.WorkStandardsBody[];
        "edition-number"?: string;
        "group-title"?: string[];
        "reference-count": number;
        publisher: string;
        issue?: string;
        "isbn-type"?: crossRefAPI.WorkISSNType[];
        license?: crossRefAPI.WorkLicense[];
        funder?: crossRefAPI.WorkFunder[];
        "content-domain": crossRefAPI.WorkDomain;
        chair?: crossRefAPI.Author[];
        "short-container-title"?: string;
        accepted?: crossRefAPI.DateParts;
        "content-updated"?: crossRefAPI.DateParts;
        "published-print"?: crossRefAPI.DateParts;
        abstract?: string;
        /** The DOI identifier associated with the work */
        DOI: string;
        type: string;
        created: crossRefAPI.Date;
        approved?: crossRefAPI.DateParts;
        page?: string;
        "update-policy"?: string;
        source: string;
        "is-referenced-by-count": number;
        title: string[];
        prefix: string;
        volume?: string;
        "clinical-trial-number"?: crossRefAPI.WorkClinicalTrial[];
        author: crossRefAPI.Author[];
        member: string;
        "content-created"?: crossRefAPI.DateParts;
        "published-online"?: crossRefAPI.DateParts;
        reference?: crossRefAPI.Reference;
        "container-title"?: string[];
        review?: crossRefAPI.WorkReview;
        "original-title"?: string[];
        language?: string;
        link?: crossRefAPI.WorkLink[];
        deposited: crossRefAPI.Date;
        score: number;
        degree?: string;
        subtitle?: string[];
        translator?: crossRefAPI.Author[];
        "free-to-read"?: crossRefAPI.WorkFreeToRead;
        editor?: crossRefAPI.Author[];
        "component-number"?: string;
        "short-title"?: string[];
        issued: crossRefAPI.DateParts;
        ISBN?: string[];
        "references-count": number;
        "part-number"?: string;
        "journal-issue"?: crossRefAPI.WorkJournalIssue;
        "alternative-id"?: string[];
        URL: string;
        archive?: string[];
        relation?: crossRefAPI.WorkRelation;
        ISSN?: string[];
        "issn-type"?: crossRefAPI.WorkISSNType[];
        subject?: string[];
        "published-other"?: crossRefAPI.DateParts;
        published?: crossRefAPI.DateParts;
        assertion?: crossRefAPI.WorkAssertion[];
        subtype?: string;
        "article-number"?: string;
    }
    export interface WorkAssertion {
        group: crossRefAPI.WorksMessageMessageItemsAssertionGroup;
        explanation: crossRefAPI.WorksMessageMessageItemsAssertionExplanation;
        name: string;
        value: string;
        URL: string;
        order: number;
    }
    export interface WorkClinicalTrial {
        "clinical-trial-number": string;
        registry: string;
        type: string;
    }
    export interface WorkDomain {
        domain: string[];
        "crossmark-restriction": boolean;
    }
    export interface WorkFreeToRead {
        "start-date"?: crossRefAPI.DateParts;
        "end-date"?: crossRefAPI.DateParts;
    }
    export interface WorkFunder {
        name: string;
        DOI?: string;
        "doi-asserted-by"?: string;
        award: string[];
    }
    export interface WorkISSNType {
        type: string;
        value: string[];
    }
    export interface WorkInstitution {
        name: string;
        place: string[];
        department: string[];
        acronym: string[];
    }
    export interface WorkJournalIssue {
        issue: string;
    }
    export interface WorkLicense {
        URL: string;
        start: crossRefAPI.Date;
        "delay-in-days": number;
        "content-version": string;
    }
    export interface WorkLink {
        URL: string;
        "content-type": string;
        "content-version": string;
        "intended-application": string;
    }
    export interface WorkMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Work;
    }
    export interface WorkMessageMessageAssertionExplanation {
        URL: string;
    }
    export interface WorkMessageMessageAssertionGroup {
        name: string;
        label: string;
    }
    export interface WorkMessageMessageRelationJava$lang$string40750 {
        "id-type": string;
        id: string;
        "asserted-by": string;
    }
    export interface WorkRelation {
        [key: string]: crossRefAPI.WorksMessageMessageItemsRelationJava$lang$string40744;
    }
    export interface WorkReview {
        type: string;
        "running-number": string;
        "revision-round": string;
        stage: string;
        "competing-interest-statement": string;
        recommendation: string;
        language: string;
    }
    export interface WorkStandardsBody {
        name: string;
        acronym: string[];
    }
    export interface WorkUpdate {
        label: string;
        DOI: string;
        type: string;
        updated: crossRefAPI.Date;
    }
    export interface Works {
        "items-per-page": number;
        query: crossRefAPI.Query;
        "total-results": number;
        /** Used to navigate to the next page of results when using cursor deep paging */
        "next-cursor"?: string;
        items: crossRefAPI.Work[];
    }
    export interface WorksMessage {
        status: string;
        "message-type": string;
        "message-version": string;
        message: crossRefAPI.Works;
    }
    export interface WorksMessageMessageItemsAssertionExplanation {
        URL: string;
    }
    export interface WorksMessageMessageItemsAssertionGroup {
        name: string;
        label: string;
    }
    export interface WorksMessageMessageItemsRelationJava$lang$string40744 {
        "id-type": string;
        id: string;
        "asserted-by": string;
    }
    export interface WorksMessageMessageItemsRelationJava$lang$string40745 {
        "id-type": string;
        id: string;
        "asserted-by": string;
    }
    export interface WorksMessageMessageItemsRelationJava$lang$string40746 {
        "id-type": string;
        id: string;
        "asserted-by": string;
    }
    export interface WorksMessageMessageItemsRelationJava$lang$string40747 {
        "id-type": string;
        id: string;
        "asserted-by": string;
    }
    export interface WorksMessageMessageItemsRelationJava$lang$string40751 {
        "id-type": string;
        id: string;
        "asserted-by": string;
    }
    export interface WorksMessageMessageItemsRelationJava$lang$string40752 {
        "id-type": string;
        id: string;
        "asserted-by": string;
    }
}